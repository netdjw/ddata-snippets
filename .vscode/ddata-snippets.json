{
  "Add subscription": {
    "scope": "typescript",
    "prefix": "!subscription",
    "body": "subscription: Subscription$0;",
    "description": "Add subscription property"
  },

  "Add loader property as new DataFactory()": {
    "scope": "typescript",
    "prefix": "!loader:",
    "body": "loader: DataFactory = new DataFactory$0();"
  },

  "Ddata loader code snippet": {
    "scope": "typescript",
    "prefix": "!loader.load",
    "body": [
      "this.subscription = this.loader.load(",
      "\t[",
      "\t\t'$1',",
      "\t],",
      "\tthis,",
      "\t[this.helperService.getOne(this.model, this.isModal)]",
      ").subscribe();"
    ],
    "description": "Ddata loader code snippet"
  },

  "Ddata class property init code snippet": {
    "scope": "typescript",
    "prefix": "!init.field",
    "body": ["this.$field = !!data.$field ? data.$field : '$0';"]
  },

  "Ddata class property init with class code snippet": {
    "scope": "typescript",
    "prefix": "!init.field.class",
    "body": ["this.$field = !!data.$field ? new ${ClassName}().init(data.$field) : new ${ClassName}().init();"]
  },

  "Ddata class data parameter init code snippet": {
    "scope": "typescript",
    "prefix": "!init.data",
    "body": ["data = !!data ? data : {};"]
  },

  "Ddata class property prepareToSave code snippet": {
    "scope": "typescript",
    "prefix": "!prepareToSave.field",
    "body": ["$field = !!this.$field ? this.$field : '$0',"]
  },

  "Ddata init array code snippet": {
    "scope": "typescript",
    "prefix": "!init.array",
    "body": [
      "// $field",
      "if (!!data.$field && data.$field instanceof Array) {",
      "\tdata.$field.forEach((element: any) => {",
      "\t\tthis.$field.push( new $class().init(element) );",
      "\t});",
      "}"
    ]
  },

  "Ddata prepareToSave array preparation code snippet": {
    "scope": "typescript",
    "prefix": "!prepareToSave.array",
    "body": [
      "// $field",
      "const $field: any[] = [];",
      "this.$field.forEach((element: ${ClassName}Interface) => {",
      "\t$field.push(element.prepareToSave());",
      "});"
    ]
  },

  "Ddata class code snippet": {
    "scope": "typescript",
    "prefix": "!class",
    "body": [
      "import { BaseModel, FieldContainerInterface, ID, ValidationRuleInterface } from 'ddata-core';",
      "import { ${ClassName}Interface, ${ClassName}UIFieldsInterface } from './${FileName}.interface';",
      "",
      "export class ${ClassName} extends BaseModel implements ${ClassName}Interface {",
      "\treadonly api_endpoint = '/${FileName}';",
      "\treadonly model_name = '${ClassName}';",
      "\tid: ID;",
      "",
      "\tvalidationRules: ValidationRuleInterface = {",
      "\t};",
      "",
      "\tfields: FieldContainerInterface<${ClassName}UIFieldsInterface>;",
      "",
      "\tinit(data?: any): ${ClassName}Interface {",
      "\t\tdata = !!data ? data : {};",
      "",
      "\t\tthis.id = !!data.id ? data.id : 0;",
      "",
      "\t\treturn this;",
      "\t}",
      "",
      "\tprepareToSave(): any {",
      "\t\treturn {",
      "\t\t\tid: !!this.id ? this.id : 0,",
      "\t\t};",
      "\t}",
      "}"
    ]
  },

  "Ddata interface code snippet": {
    "scope": "typescript",
    "prefix": "!interface",
    "body": [
      "import { BaseModelWithoutTypeDefinitionInterface, FieldsInterface, ID } from 'ddata-core';",
      "",
      "export interface ${InterfaceName}UIFieldsInterface {",
      "\tname: string;",
      "}",
      "",
      "export interface ${InterfaceName}Interface extends",
      "\t${InterfaceName}UIFieldsInterface,",
      "\tFieldsInterface<${InterfaceName}UIFieldsInterface>,",
      "\tBaseModelWithoutTypeDefinitionInterface {",
      "",
      "\tid: ID;",
      "}"
    ]
  },

  "Ddata required string validation rule code snippet": {
    "scope": "typescript",
    "prefix": "!valid.required.string",
    "body": [
      "${field}: ['required', 'string'],"
    ]
  },

  "Ddata required integer validation rule code snippet": {
    "scope": "typescript",
    "prefix": "!valid.required.integer",
    "body": [
      "${field}: ['required', 'integer'],"
    ]
  }
}
